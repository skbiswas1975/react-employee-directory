{"version":3,"sources":["components/EmployeeData.js","components/SearchResult.js","App.js","serviceWorker.js","index.js"],"names":["employeelist","SearchResult","this","props","fname","lname","email","title","country","State","DOJ","console","log","class","src","alt","Component","EmpSearch","state","filter","data","EmployeeData","handleChange","event","setState","target","value","lowercasedFilter","toLowerCase","filteredData","item","Object","keys","some","key","includes","style","padding","border","borderRadius","for","type","id","onChange","overflowX","map","employee","index","exact","to","route","path","component","Boolean","window","location","hostname","match","Result","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c68f284f.chunk.js","sourcesContent":["let employeelist =  [\n  {\n    \"fname\": \"Jayne\",\n    \"lname\": \"Washington\",\n    \"email\": \"jaynewashington@exposa.com\",\n    \"title\": \"CEO\",\n    \"country\": \"USA\",\n    \"State\": \"San Francisco\",\n    \"DOJ\": \"2nd January, 1919\",\n    \"route\": \"/jaynewashington@exposa.com\"\n  },\n  {\n    \"fname\": \"Peterson\",\n    \"lname\": \"Dalton\",\n    \"email\": \"petersondalton@exposa.com\",\n    \"title\": \"CFO\",\n    \"country\": \"USA\",\n    \"State\": \"New York\",\n    \"DOJ\": \"2nd January, 2019\",\n    \"route\": \"/petersondalton@exposa.com\"\n  },\n  {\n    \"fname\": \"Velazquez\",\n    \"lname\": \"Calderon\",\n    \"email\": \"velazquezcalderon@exposa.com\",\n    \"title\": \"Director\",\n    \"country\": \"USA\",\n    \"State\": \"San Jose\",\n    \"DOJ\": \"2nd January, 1819\",\n    \"route\": \"/velazquezcalderon@exposa.com\"\n  },\n  {\n    \"fname\": \"Norman\",\n    \"lname\": \"Reed\",\n    \"email\": \"normanreed@exposa.com\",\n    \"title\": \"Manager - Marketting\",\n    \"country\": \"USA\",\n    \"State\": \"San Francisco\",\n    \"DOJ\": \"2nd January, 1719\",\n    \"route\": \"/normanreed@exposa.com\"\n  }\n]\nexport default employeelist","import React, { Component } from 'react';\n\nclass SearchResult extends Component {\n\n  \n   render() {\n    const {fname, lname, email, title, country, State, DOJ} = this.props\n       console.log(this.props);\n       return (\n        <div class=\"row\">\n        <div class=\"col-xs-10 col-sm-10 col-md-10\">\n            <div class=\"well well-sm\">\n                <div class=\"row\">\n                    <div class=\"col-sm-6 col-md-4\">\n                        <img src=\"http://placehold.it/380x500\" alt=\"\" class=\"img-rounded img-responsive\" />\n                    </div>\n                    <div class=\"col-sm-6 col-md-8\">\n                        <h4>{fname + ' '+ lname}</h4>\n                        \n                        <h5>{title}</h5>\n                        <small>\n                          <cite title=\"San Francisco, USA\">\n                          {State + ',' + country} \n                              <i class=\"glyphicon glyphicon-map-marker\"></i>\n                          </cite>\n                        </small>\n                        <p>\n                            <i class=\"glyphicon glyphicon-envelope\"></i>{email}\n                            <br />\n                            <i class=\"glyphicon glyphicon-gift\"></i>{DOJ}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n      </div>\n       )\n   }\n}\nexport default SearchResult","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, NavLink, BrowserRouter as Router } from \"react-router-dom\";\nimport EmployeeData from './components/EmployeeData';\nimport EmployeeDetails from './components/SearchResult';\n\n\nclass EmpSearch extends Component {\n\n  state = {\n    filter: \"\",\n    data: EmployeeData,\n  };\n\n  handleChange = event => {\n    this.setState({ filter: event.target.value });\n  };\n\nrender() {\n   const { filter, data } = this.state;\n   const lowercasedFilter = filter.toLowerCase();\n   const filteredData = data.filter(item => {\n     return Object.keys(item).some(key =>\n       item[key].toLowerCase().includes(lowercasedFilter)\n     );\n   });\n\n   return (\n       <Router>\n       <div class=\"container-fluid\" style={{padding: \"3%\"}}>\n        <div class=\"col-sm-6\" style={{border: '1px solid #e6e1e1', borderRadius: '10px!important'}}>\n            <h2>Employee Directory</h2>\n            <p>Search with employee name or part of the name in the box bellow:</p>\n\n            <div class=\"form-group\">\n              <label for=\"usr\"><h4>Employee name:</h4></label>\n              <input type=\"text\" class=\"form-control\" id=\"usr\" value={filter} onChange={this.handleChange} />\n\n              <h2>Search result</h2>\n              <p>Click on the employee name for the details:</p>\n\n              <table class=\"table table-dark table-hover\" style={{overflowX : 'scroll'}}>\n                <thead>\n                  <tr>\n                    <th>Employee name</th>\n                    <th>Designation</th>\n                    <th>Email</th>\n                  </tr>\n                </thead>\n                <tbody>\n                {filteredData.map((employee, index) => {\n                 return <tr key={index}>\n                    <td><NavLink exact to={employee.route}>{employee.fname + ' ' + employee.lname}</NavLink></td>\n                    <td>{employee.title}</td>\n                    <td>{employee.email}</td>\n                  </tr>\n                  })}\n           </tbody>\n              </table>\n            </div>\n        </div>\n\n        <div class=\"col-sm-1\">  \n        </div>\n\n          <div class=\"col-sm-5\" style={{border: '1px solid #e6e1e1', borderRadius: '10px!important'}}>\n             {\n               filteredData.map((employee, index) => {\n                 console.log(employee, index, employee.route);\n                 return <Route exact key={index} path={employee.route} component={() => <EmployeeDetails fname={employee.fname} lname={employee.lname} title={employee.title} State={employee.State} country={employee.country} email={employee.email} DOJ={employee.DOJ} />} />\n               })\n             }\n</div>\n      </div>\n       </Router>\n   );\n}\n}\n\n\nexport default EmpSearch;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport Result from './components/SearchResult';\n\nconst routing = (\n  <Router>\n    <div>\n      <Route path=\"/SearchResult\" component={Result} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}